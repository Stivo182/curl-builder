// Copyright (c) 2024 Dmitry Ivanov <ivanovdmitry91@gmail.com>.
// Licensed under the MIT License.
// https://github.com/Stivo182/curl/blob/master/LICENSE

// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодключитьCurl();
	УстановитьНадписьПодвала();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНастройкиПоУмолчанию();
	ОбновитьРеквизиты();
	ЗаполнитьСпискиВыбора();
	ПроверитьИИсправитьДинамическиеПереключатели();
	НастроитьФорму();	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомандныйИнтерпретаторПриИзменении(Элемент)
	СобратьКомандуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПострочныйВыводОпцийПриИзменении(Элемент)
	СобратьКомандуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКраткуюФормуОпцийПриИзменении(Элемент)
	СобратьКомандуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура URLПриИзменении(Элемент)
	ПрочитатьСхемуURL();
	ОбновитьРеквизиты();
	ЗаполнитьСпискиВыбора();
	ПроверитьИИсправитьДинамическиеПереключатели();
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура МетодЗапросаПриИзменении(Элемент)
	
	Если Объект.МетодЗапроса = "HEAD" Тогда
		Объект.ПолучитьТолькоЗаголовки = Истина;
	КонецЕсли;
	
	ОбновитьРеквизиты();
	ЗаполнитьСпискиВыбора();
	ПроверитьИИсправитьДинамическиеПереключатели();
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтправляемыхДанныхПриИзменении(Элемент)
	ОбновитьРеквизиты();
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВводитьЗаголовкиЗапросаВСтрокеПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура МетодАутентификацииПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ТихийРежимПриИзменении(Элемент)
	
	Если Не Объект.ТихийРежим Тогда
		Объект.ПоказыватьОшибкиВТихомРежиме = Ложь;	
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ТелоЗапросаФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ТелоЗапросаФайл");
КонецПроцедуры

&НаКлиенте
Процедура ПроксиСертификатКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ПроксиСертификатКлиента");
КонецПроцедуры

&НаКлиенте
Процедура ПроксиЗакрытыйКлючСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ПроксиЗакрытыйКлючСертификата");
КонецПроцедуры

&НаКлиенте
Процедура ПроксиСертификатыУдостоверяющихЦентровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ПроксиСертификатыУдостоверяющихЦентров");
КонецПроцедуры

&НаКлиенте
Процедура СертификатКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "СертификатКлиента");
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыйКлючСертификатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ЗакрытыйКлючСертификата");
КонецПроцедуры

&НаКлиенте
Процедура СертификатыУдостоверяющихЦентровНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "СертификатыУдостоверяющихЦентров");
КонецПроцедуры

&НаКлиенте
Процедура ФайлСохраненияРезультатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ФайлСохраненияРезультата", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФайлСохраненияЗаголовковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачатьВыборФайла(Объект, "ФайлСохраненияЗаголовков", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроксиМетодАутентификацииПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПроксиВидСертификатаУЦПриИзменении(Элемент)
	НастроитьФорму();	
КонецПроцедуры

&НаКлиенте
Процедура ВидСертификатаУЦПриИзменении(Элемент)
	НастроитьФорму();	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьПеренаправленияПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ПроксиПротоколПриИзменении(Элемент)
	
	Если Не Объект.ПроксиПротокол = ПротоколПроксиHTTPS() Тогда
		Объект.РазрешитьНезащищенноеПодключениеКПрокси = Ложь;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораМетодаАутентификацииПрокси();
	ПроверитьИИсправитьДинамическиеПереключатели();
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТолькоЗаголовкиПриИзменении(Элемент)
	
	Если Объект.ПолучитьТолькоЗаголовки Тогда
		Объект.МетодЗапроса = "HEAD";
	КонецЕсли;
	
	ОбновитьРеквизиты();
	ЗаполнитьСпискиВыбора();
	ПроверитьИИсправитьДинамическиеПереключатели();
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Файлы.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура("ДанныеСтроки", ДанныеСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВТаблицеФайлы", ЭтотОбъект, ДополнительныеПараметры);
	НачатьВыборФайла(ДанныеСтроки, "Файл", Ложь, ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоляФормы

&НаКлиенте
Процедура ПоляФормыФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ПоляФормы.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура("ДанныеСтроки", ДанныеСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаВТаблицеПоляФормы", ЭтотОбъект, ДополнительныеПараметры);
	НачатьВыборФайла(ДанныеСтроки, "Файл", Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляФормыТекстПриИзменении(Элемент)
	ДанныеСтроки = Элементы.ПоляФормы.ТекущиеДанные;
	ДанныеСтроки.Файл = "";
КонецПроцедуры

&НаКлиенте
Процедура ПоляФормыФайлПриИзменении(Элемент)
	ДанныеСтроки = Элементы.ПоляФормы.ТекущиеДанные;
	ДанныеСтроки.Текст = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СобратьКоманду(Команда)
	СобратьКомандуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстЗаголовковПримером(Команда)
	ЗаполнитьТекстЗаголовковПримеромНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГитхаб(Команда)
	ПерейтиПоНавигационнойСсылке("https://github.com/Stivo182/curl-builder");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция Версия()
	Возврат "1.0.0";
КонецФункции

&НаКлиенте
Процедура УстановитьНастройкиПоУмолчанию()
	Объект.ИспользоватьКраткуюФормуОпций = Истина;
	Объект.ПострочныйВыводОпций = Истина;
	Объект.КомандныйИнтерпретатор = ИмяКомандногоИнтерпретатораCmd();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФорму()
		
	// Главная
	Элементы.МетодЗапроса.Доступность = ДоступенМетодЗапроса() И Не Объект.ПолучитьТолькоЗаголовки;
	Элементы.ПолучитьТолькоЗаголовки.Доступность = ВозможноПолучатьЗаголовки;
	
	// Отправляемые данные
	Элементы.ГруппаОтправляемыеДанные.Доступность = ВозможноОтправлениеДанных;
	Элементы.СтраницаОтправляемыеДанныеФайл.Видимость = Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхФайл();
	Элементы.СтраницаОтправляемыеДанныеТекст.Видимость = Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхТекст();
	Элементы.СтраницаОтправляемыеДанныеMultipart.Видимость = Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхMultipart();

	// Аутентификация
	Элементы.ГруппаЛогинИПароль.Видимость = Объект.МетодАутентификации = МетодАутентификацииBasic()
		Или Объект.МетодАутентификации = МетодАутентификацииDigest();
	Элементы.ГруппаAWS4.Видимость = Объект.МетодАутентификации = МетодАутентификацииAWS4();
	Элементы.BearerToken.Видимость = Объект.МетодАутентификации = МетодАутентификацииBearerToken();
	
	// Сохраняемые файлы
	Элементы.ФайлСохраненияЗаголовков.Доступность = ДоступенФайлСохраненияЗаголовков();
	
	// Заголовки запроса
	Элементы.СтраницаЗаголовкиЗапроса.Доступность = ЭтоHTTP(СхемаURL);
	Элементы.СтраницыЗаголовкиЗапроса.ТекущаяСтраница = ?(Объект.ВводитьЗаголовкиЗапросаТекстом, 
		Элементы.СтраницаЗаголовкиЗапросаТекст, 
		Элементы.СтраницаЗаголовкиЗапросаТаблица);
		
	// Прокси
	Элементы.ГруппаПроксиЛогинИПароль.Доступность = ЗначениеЗаполнено(Объект.ПроксиМетодАутентификации);
	Элементы.ПроксиСертификатыУдостоверяющихЦентров.Видимость = Объект.ПроксиВидСертификатаУЦ = ВидСертификатаУЦФайлом();
	Элементы.РазрешитьНезащищенноеПодключениеКПрокси.Доступность = Объект.ПроксиПротокол = ПротоколПроксиHTTPS();
		
	// Сертификаты
	Элементы.СертификатыУдостоверяющихЦентров.Видимость = Объект.ВидСертификатаУЦ = ВидСертификатаУЦФайлом();
						
	// Прочие настройки
	Элементы.ГруппаПрочиеНастройкиHTTP.Доступность = ЭтоHTTP(СхемаURL);
	Элементы.ПоказыватьОшибкиВТихомРежиме.Доступность = Объект.ТихийРежим;
	Элементы.РазрешитьНезащищенноеПодключение.Доступность = ВозможноРазрешитьНезащищенноеПодключение;
	
	// Перенаправления
	Элементы.РазрешитьПередачуСведенийАутентификацииНаДругойХост.Доступность = Объект.РазрешитьПеренаправления;
	Элементы.МаксимальноеКоличествоПеренаправлений.Доступность = Объект.РазрешитьПеренаправления;
	Элементы.ЗапроситьСжатиеОтвета.Доступность = ЭтоHTTP(СхемаURL);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьПодвала()
	ТекстНадписи = СтрШаблон("Версия: %1, версия обработки cURL: %2", Версия(), ВерсияОбработкиCurl());
	Элементы.НадписьПодвала.Заголовок = ТекстНадписи;
КонецПроцедуры

// Проверить и исправить динамические переключатели.
&НаКлиенте
Процедура ПроверитьИИсправитьДинамическиеПереключатели()
	
	ПроверитьИИсправитьДинамическийПереключатель("ВидОтправляемыхДанных");
	ПроверитьИИсправитьДинамическийПереключатель("МетодАутентификации");
	ПроверитьИИсправитьДинамическийПереключатель("ПроксиМетодАутентификации");
	
КонецПроцедуры

// Проверить и исправить динамический переключатель.
// 
// Параметры:
//  ИмяЭлементаИРеквизита - Строка - Имя 
&НаКлиенте
Процедура ПроверитьИИсправитьДинамическийПереключатель(ИмяЭлементаИРеквизита)
	
	Элемент = Элементы[ИмяЭлементаИРеквизита]; // ПолеФормы
	//@skip-check property-return-type
	СписокВыбора = Элемент.СписокВыбора; // СписокЗначений из Строка
	КоличествоВариантов = СписокВыбора.Количество();
	
	Если КоличествоВариантов = 0 Тогда
		Объект[ИмяЭлементаИРеквизита] = "";
	ИначеЕсли КоличествоВариантов = 1 
		Или СписокВыбора.НайтиПоЗначению(Объект[ИмяЭлементаИРеквизита]) = Неопределено Тогда
		Объект[ИмяЭлементаИРеквизита] = СписокВыбора[0].Значение;	
	КонецЕсли;
	
	Элемент.Видимость = СписокВыбора.Количество() > 1;
	
КонецПроцедуры

// Начать выбор файла.
// 
// Параметры:
// 	Контекст - Произвольный - Контекст
//  ИмяПоля - Строка - Имя поля
//  Сохранение - Булево - Сохранение файла
// 	ОписаниеОповещения - ОписаниеОповещения - Описание оповещения при выборе файла
&НаКлиенте
Процедура НачатьВыборФайла(Контекст, ИмяПоля, Сохранение = Ложь, ОписаниеОповещения = Неопределено)
	
	РежимДиалога = ?(Сохранение, РежимДиалогаВыбораФайла.Сохранение, РежимДиалогаВыбораФайла.Открытие);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалога);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Контекст", Контекст);
	ДополнительныеПараметры.Вставить("ИмяПоля", ИмяПоля);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

// После выбора файла.
// 
// Параметры:
//  ВыбранныеФайлы - Массив из Строка - Выбранные файлы
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
//  	* Контекст - Произвольный - Контекст
//		* ИмяПоля - Строка - Имя поля
//		* ОписаниеОповещения - ОписаниеОповещения - Описание оповещения при выборе файла
&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Контекст[ДополнительныеПараметры.ИмяПоля] = ВыбранныеФайлы[0];
	
	Если Не ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры

// После выбора файла в таблице файлы.
// 
// Параметры:
//  ПолноеИмя - Строка - Полное имя
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
//  	* ДанныеСтроки - ДанныеФормыЭлементКоллекции - Строка таблицы Файлы:
//  		** Имя - Строка - Имя
//  		** ИмяФайла - Строка - Имя файла
&НаКлиенте
Процедура ПослеВыбораФайлаВТаблицеФайлы(ПолноеИмя, ДополнительныеПараметры) Экспорт
	
	Файл = Новый Файл(ПолноеИмя);
	
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	ДанныеСтроки.Имя = Файл.ИмяБезРасширения;
	ДанныеСтроки.ИмяФайла = Файл.Имя;
	
КонецПроцедуры

// После выбора файла в таблице поля формы.
// 
// Параметры:
//  ПолноеИмя - Строка - Полное имя
//  ДополнительныеПараметры - Структура - Дополнительные параметры:
//  	* ДанныеСтроки - ДанныеФормыЭлементКоллекции - Строка таблицы Файлы:
//  		** Текст - Строка - Текст
&НаКлиенте
Процедура ПослеВыбораФайлаВТаблицеПоляФормы(ПолноеИмя, ДополнительныеПараметры) Экспорт
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	ДанныеСтроки.Текст = "";
КонецПроцедуры

&НаКлиенте
Функция ДоступенМетодЗапроса()
	Возврат ЭтоHTTP(СхемаURL) И Не Объект.ПолучитьТолькоЗаголовки;
КонецФункции

&НаКлиенте
Функция ДоступенФайлСохраненияЗаголовков()
	Возврат ЭтоHTTP(СхемаURL) Или ЭтоFTP(СхемаURL);
КонецФункции

&НаКлиенте
Функция ЭтоМетодGET()
	Возврат МетодЗапроса() = "GET";
КонецФункции

&НаКлиенте
Функция ЭтоМетодPOST()
	Возврат МетодЗапроса() = "POST";
КонецФункции

&НаКлиенте
Функция МетодЗапроса()
	Возврат ВРег(СокрЛП(Объект.МетодЗапроса));
КонецФункции

// Это HTTP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это HTTP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоHTTP(СхемаURL)
	Возврат СхемаURL = "HTTP" Или СхемаURL = "HTTPS";
КонецФункции

// Это HTTPS.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это HTTPS
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоHTTPS(СхемаURL)
	Возврат СхемаURL = "HTTPS";
КонецФункции

// Это FTP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это FTP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоFTP(СхемаURL)
	Возврат СхемаURL = "FTP" Или СхемаURL = "FTPS";
КонецФункции

// Это FILE.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это FILE
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоFILE(СхемаURL)
	Возврат СхемаURL = "FILE";
КонецФункции

// Это SMTP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это SMTP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSMTP(СхемаURL)
	Возврат СхемаURL = "SMTP";
КонецФункции

// Это IMAP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это IMAP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоIMAP(СхемаURL)
	Возврат СхемаURL = "IMAP";
КонецФункции

// Это SFTP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это SFTP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSFTP(СхемаURL)
	Возврат СхемаURL = "SFTP";
КонецФункции

// Это SCP.
// 
// Параметры:
//  СхемаURL - Строка - Схема URL
// 
// Возвращаемое значение:
//  Булево - Это SCP
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоSCP(СхемаURL)
	Возврат СхемаURL = "SCP";
КонецФункции

&НаКлиенте
Процедура ПрочитатьСхемуURL()
	СхемаURL = ПолучитьСхемуURL(Объект.URL);	
КонецПроцедуры

// Возвращает схему URL.
// 
// Параметры:
//  URL - Строка - Адрес ресурса в сети Интернет
// 
// Возвращаемое значение:
//  Строка - схема URL
&НаКлиенте
Функция ПолучитьСхемуURL(URL)
	
	Схема = "";
	Позиция = СтрНайти(URL, "://");
	Если Позиция > 0 Тогда
		Схема = ВРег(Лев(URL, Позиция - 1));
	КонецЕсли;
	
	Возврат Схема;
		
КонецФункции

#Область Сборка

// Собрать команду на сервере.
// 
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура СобратьКомандуНаСервере()
		
	НачатьНовуюСборкуКода();

	Curl = СоздатьОбъектCurl()
		.ИспользоватьКраткуюФормуОпций(Объект.ИспользоватьКраткуюФормуОпций)
		.ВыводитьОпцииПострочно(Объект.ПострочныйВыводОпций); // ВнешняяОбработка
	
	ДополнитьСборкуКоманднымИнтерпретатором(Curl);	
	ДополнитьСборкуДаннымиMultipart(Curl);
	ДополнитьСборкуАутентификацией(Curl);
	ДополнитьСборкуЗаголовками(Curl);
	ДополнитьСборкуПрокси(Curl);
	ДополнитьСборкуСертификатами(Curl);
	ДополнитьСборкуТихимРежимомИОтображениемОшибок(Curl);		
	ДополнитьСборкуФайламиРезультата(Curl);
	ДополнитьСборкуРазрешениемПеренаправлений(Curl);
	ДополнитьСборкуРазрешениемНезащищенногоПодключения(Curl);
	ДополнитьСборкуИспользованиемСжатия(Curl);
	ДополнитьСборкуТаймаутами(Curl);
	ДополнитьСборкуПовторнымиПопытками(Curl);
	ДополнитьСборкуОграничениямиСкорости(Curl);
	ДополнитьСборкуМетодомОбработки();
	
	РезультатКоманда = Curl.СобратьКоманду(Объект.URL, ПолучитьОтправляемыеДанные(), Объект.МетодЗапроса); // Строка
	Объект.РезультатКоманда = РезультатКоманда;
	
	ОтформатироватьСобранныйКод();
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьCurl()
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");       
	ДвоичныеДанные = ОбъектОбработки.ПолучитьМакет("curl_epf");               
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ОписаниеЗащитыОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	ВнешниеОбработки.Подключить(АдресХранилища, , Ложь, ОписаниеЗащитыОтОпасныхДействий); 
КонецПроцедуры

// Создает объект внешней обработки cURL.
// 
// Возвращаемое значение:
//  ВнешняяОбработка - Внешняя обработка cURL
&НаСервере
Функция СоздатьОбъектCurl()
	Возврат ВнешниеОбработки.Создать("cURL");	
КонецФункции

// Версия обработки cURL.
// 
// Возвращаемое значение:
//  Строка
&НаСервере
Функция ВерсияОбработкиCurl()
	//@skip-check dynamic-access-method-not-found
	Возврат СоздатьОбъектCurl().ВерсияОбработки();
КонецФункции

&НаСервере
Процедура НачатьНовуюСборкуКода()
	Объект.Результат1С = "Curl";
КонецПроцедуры

// Получает отправляемые данные.
// 
// Возвращаемое значение:
//  Файл, Строка, Неопределено - Получить отправляемые данные
&НаСервере
Функция ПолучитьОтправляемыеДанные()
	ОтправляемыеДанные = Неопределено;	
	
	Если Не ВозможноОтправлениеДанных Тогда
		Возврат ОтправляемыеДанные;
	КонецЕсли;
	
	Если Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхТекст()
		И ЗначениеЗаполнено(Объект.ТелоЗапросаТекст) Тогда
		ОтправляемыеДанные = Объект.ТелоЗапросаТекст;
	ИначеЕсли Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхФайл() 
		И ЗначениеЗаполнено(Объект.ТелоЗапросаФайл) Тогда
		ОтправляемыеДанные = Новый Файл(Объект.ТелоЗапросаФайл);	
	КонецЕсли;
	
	Возврат ОтправляемыеДанные;
КонецФункции

// Удаляет запрещенные символы из переданной отправляемой строки.
// 
// Параметры:
//  Строка - Строка
&НаСервере
Процедура УдалитьЗапрещенныеСимволыОтправляемыхДанных(Строка)
	Строка = СтрЗаменить(Строка, Символы.ПС, ""); 
КонецПроцедуры

&НаСервере
Процедура ОтформатироватьСобранныйКод()

	КоличествоСтрок = СтрЧислоСтрок(Объект.Результат1С);
	
	Если КоличествоСтрок = 2 Тогда
		Объект.Результат1С = СтрПолучитьСтроку(Объект.Результат1С, 1) 
			+ СокрЛП(СтрПолучитьСтроку(Объект.Результат1С, 2));	
	КонецЕсли;
	
	Объект.Результат1С = Объект.Результат1С + ";";

КонецПроцедуры

#Область ЧастиСборки

// Дополняет сборку аутентификацией.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуАутентификацией(Curl)
	
	Если Объект.МетодАутентификации = МетодАутентификацииBasic() Тогда
		Curl.Аутентификация(Объект.ИмяПользователя, Объект.Пароль);	
		ДобавитьМетодОбработкиВКод("Аутентификация", Объект.ИмяПользователя, Объект.Пароль);
	ИначеЕсли Объект.МетодАутентификации = МетодАутентификацииDigest() Тогда
		Curl.АутентификацияDigest(Объект.ИмяПользователя, Объект.Пароль);		
		ДобавитьМетодОбработкиВКод("АутентификацияDigest", Объект.ИмяПользователя, Объект.Пароль);
	ИначеЕсли Объект.МетодАутентификации = МетодАутентификацииAWS4() Тогда
		Curl.АутентификацияAWS4(Объект.КлючДоступаAWS4, Объект.СекретныйКлючAWS4, Объект.РегионAWS4, Объект.СервисAWS4);
		ДобавитьМетодОбработкиВКод("АутентификацияAWS4", 
			Объект.КлючДоступаAWS4, Объект.СекретныйКлючAWS4, Объект.РегионAWS4, Объект.СервисAWS4);
	ИначеЕсли Объект.МетодАутентификации = МетодАутентификацииBearerToken() Тогда
		Curl.АутентификацияBearerToken(Объект.BearerToken);		
		ДобавитьМетодОбработкиВКод("АутентификацияBearerToken", Объект.BearerToken);			
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сборку тихим режимом и отображением ошибок.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуТихимРежимомИОтображениемОшибок(Curl)

	Curl.ИспользоватьТихийРежим(Объект.ТихийРежим);
	Curl.ПоказыватьОшибкиВТихомРежиме(Объект.ПоказыватьОшибкиВТихомРежиме);
	
КонецПроцедуры
	
// Дополняет сборку файлами.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуФайламиРезультата(Curl)
	
	Curl.УказатьФайлСохраненияРезультата(Объект.ФайлСохраненияРезультата);
	
	Если ЗначениеЗаполнено(Объект.ФайлСохраненияРезультата) Тогда
		ДобавитьМетодОбработкиВКод("УказатьФайлСохраненияРезультата", Объект.ФайлСохраненияРезультата);
	КонецЕсли;
	
	Curl.УказатьФайлСохраненияЗаголовков(Объект.ФайлСохраненияЗаголовков);
	
	Если ЗначениеЗаполнено(Объект.ФайлСохраненияЗаголовков) Тогда
		ДобавитьМетодОбработкиВКод("УказатьФайлСохраненияЗаголовков", Объект.ФайлСохраненияЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сборку заголовками.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуЗаголовками(Curl)
	
	Если Не ЭтоHTTP(СхемаURL) Тогда
		Возврат;
	КонецЕсли;
	
	Заголовки = ПолучитьТекстЗаголовков();
	Curl.УстановитьЗаголовки(Заголовки);
	ДобавитьМетодыУстановкиЗаголовковВКод(Заголовки);
		
КонецПроцедуры

// Дополняет сборку методом обработки.
// 
&НаСервере
Процедура ДополнитьСборкуМетодомОбработки()
	
	Если ЭтоОтправкаДанных Тогда
		ДобавитьМетодОтправитьВКод();
	ИначеЕсли Объект.ПолучитьТолькоЗаголовки Тогда
		ДобавитьМетодПолучитьЗаголовкиВКод();
	Иначе
		ДобавитьМетодПолучитьВКод();
	КонецЕсли;
		
КонецПроцедуры

// Дополняет сборку командным интерпретатором.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуКоманднымИнтерпретатором(Curl)
	
	Если Объект.КомандныйИнтерпретатор = ИмяКомандногоИнтерпретатораCmd() Тогда
		Curl.ИспользоватьКомандныйИнтерпретаторCmd();
	ИначеЕсли Объект.КомандныйИнтерпретатор = ИмяКомандногоИнтерпретатораBash() Тогда
		Curl.ИспользоватьКомандныйИнтерпретаторBash();
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сборку прокси.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуПрокси(Curl)
	
	Если ЗначениеЗаполнено(Объект.ПроксиХост) Тогда
		
		Curl.УстановитьПрокси(Объект.ПроксиПротокол, Объект.ПроксиХост, Объект.ПроксиПорт);		
		
		ДобавитьМетодОбработкиВКод("УстановитьПрокси", Объект.ПроксиПротокол, Объект.ПроксиХост, Объект.ПроксиПорт);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПроксиИмяПользователя) Или ЗначениеЗаполнено(Объект.ПроксиПароль) Тогда
		Если Объект.ПроксиМетодАутентификации = МетодАутентификацииBasic() Тогда
			
			Curl.АутентификацияПрокси(Объект.ПроксиИмяПользователя, Объект.ПроксиПароль);	
				
			ДобавитьМетодОбработкиВКод("АутентификацияПрокси", Объект.ПроксиИмяПользователя, Объект.ПроксиПароль);
			
		ИначеЕсли Объект.ПроксиМетодАутентификации = МетодАутентификацииDigest() Тогда
			
			Curl.АутентификацияПроксиDigest(Объект.ПроксиИмяПользователя, Объект.ПроксиПароль);		
			
			ДобавитьМетодОбработкиВКод("АутентификацияПроксиDigest", Объект.ПроксиИмяПользователя, Объект.ПроксиПароль);
			
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПроксиСертификатКлиента) Тогда
		
		Curl.ПроксиУстановитьСертификатКлиента(Объект.ПроксиСертификатКлиента, 
			Объект.ПроксиПарольЗакрытогоКлючаСертификата, Объект.ПроксиТипСертификатаКлиента);	
				
		ДобавитьМетодОбработкиВКод("ПроксиУстановитьСертификатКлиента", Объект.ПроксиСертификатКлиента, 
			Объект.ПроксиПарольЗакрытогоКлючаСертификата, Объект.ПроксиТипСертификатаКлиента);
			
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ПроксиЗакрытыйКлючСертификата) Тогда
		
		Curl.ПроксиУстановитьЗакрытыйКлючСертификата(Объект.ПроксиЗакрытыйКлючСертификата, 
			Объект.ПроксиКодовоеСловоЗакрытогоКлючаСертификата, Объект.ПроксиТипЗакрытогоКлючаСертификата);	
				
		ДобавитьМетодОбработкиВКод("ПроксиУстановитьЗакрытыйКлючСертификата", Объект.ПроксиЗакрытыйКлючСертификата, 
			Объект.ПроксиКодовоеСловоЗакрытогоКлючаСертификата, Объект.ПроксиТипЗакрытогоКлючаСертификата);
	
	КонецЕсли;

	Если Объект.ПроксиВидСертификатаУЦ = ВидСертификатаУЦИзОС() Тогда
		
		Curl.ПроксиИспользоватьСертификатыУдостоверяющихЦентровИзОС();		
		
		ДобавитьМетодОбработкиВКод("ПроксиИспользоватьСертификатыУдостоверяющихЦентровИзОС");
		
	ИначеЕсли Объект.ПроксиВидСертификатаУЦ = ВидСертификатаУЦФайлом() 
		И ЗначениеЗаполнено(Объект.ПроксиСертификатыУдостоверяющихЦентров) Тогда
			
		Curl.ПроксиУстановитьСертификатыУдостоверяющихЦентров(Объект.ПроксиСертификатыУдостоверяющихЦентров);	
			
		ДобавитьМетодОбработкиВКод("ПроксиУстановитьСертификатыУдостоверяющихЦентров", 
			Объект.ПроксиСертификатыУдостоверяющихЦентров);	
				
	КонецЕсли;
	
	Если Объект.РазрешитьНезащищенноеПодключениеКПрокси Тогда
		Curl.РазрешитьНезащищенноеПодключениеКПрокси();		
		ДобавитьМетодОбработкиВКод("РазрешитьНезащищенноеПодключениеКПрокси");		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет сборку сертификатами.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуСертификатами(Curl)
	
	Если ЗначениеЗаполнено(Объект.СертификатКлиента) Тогда
		
		Curl.УстановитьСертификатКлиента(Объект.СертификатКлиента, 
			Объект.ПарольЗакрытогоКлючаСертификата, Объект.ТипСертификатаКлиента);	
				
		ДобавитьМетодОбработкиВКод("УстановитьСертификатКлиента", Объект.СертификатКлиента, 
			Объект.ПарольЗакрытогоКлючаСертификата, Объект.ТипСертификатаКлиента);
			
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ЗакрытыйКлючСертификата) Тогда
		
		Curl.УстановитьЗакрытыйКлючСертификата(Объект.ЗакрытыйКлючСертификата, 
			Объект.КодовоеСловоЗакрытогоКлючаСертификата, Объект.ТипЗакрытогоКлючаСертификата);	
				
		ДобавитьМетодОбработкиВКод("УстановитьЗакрытыйКлючСертификата", Объект.ЗакрытыйКлючСертификата, 
			Объект.КодовоеСловоЗакрытогоКлючаСертификата, Объект.ТипЗакрытогоКлючаСертификата);
	
	КонецЕсли;

	Если Объект.ВидСертификатаУЦ = ВидСертификатаУЦИзОС() Тогда
		
		Curl.ИспользоватьСертификатыУдостоверяющихЦентровИзОС();		
		
		ДобавитьМетодОбработкиВКод("ИспользоватьСертификатыУдостоверяющихЦентровИзОС");
		
	ИначеЕсли Объект.ВидСертификатаУЦ = ВидСертификатаУЦФайлом() 
		И ЗначениеЗаполнено(Объект.СертификатыУдостоверяющихЦентров) Тогда
			
		Curl.УстановитьСертификатыУдостоверяющихЦентров(Объект.СертификатыУдостоверяющихЦентров);	
			
		ДобавитьМетодОбработкиВКод("УстановитьСертификатыУдостоверяющихЦентров", 
			Объект.СертификатыУдостоверяющихЦентров);	
				
	КонецЕсли;
						
КонецПроцедуры

// Дополняет сборку таймаутами.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуТаймаутами(Curl)
	
	Если ЗначениеЗаполнено(Объект.Таймаут) Тогда	
		Curl.УстановитьТаймаут(Объект.Таймаут);					
		ДобавитьМетодОбработкиВКод("УстановитьТаймаут", Объект.Таймаут);		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ТаймаутСоединения) Тогда		
		Curl.УстановитьТаймаутСоединения(Объект.ТаймаутСоединения);				
		ДобавитьМетодОбработкиВКод("УстановитьТаймаутСоединения", Объект.ТаймаутСоединения);			
	КонецЕсли;	
					
КонецПроцедуры

// Дополняет сборку повторными попытками.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуПовторнымиПопытками(Curl)
	
	Если ЗначениеЗаполнено(Объект.КоличествоПопыток) Тогда		
		Curl.УстановитьКоличествоПопыток(Объект.КоличествоПопыток);					
		ДобавитьМетодОбработкиВКод("УстановитьКоличествоПопыток", Объект.КоличествоПопыток);			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ЗадержкаМеждуПопытками) Тогда	
		Curl.УстановитьЗадержкуПовторнойПопытки(Объект.ЗадержкаМеждуПопытками);				
		ДобавитьМетодОбработкиВКод("УстановитьЗадержкуПовторнойПопытки", Объект.ЗадержкаМеждуПопытками);			
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Объект.ТаймаутПовторныхПопыток) Тогда	
		Curl.УстановитьТаймаутПовторныхПопыток(Объект.ТаймаутПовторныхПопыток);				
		ДобавитьМетодОбработкиВКод("УстановитьТаймаутПовторныхПопыток", Объект.ТаймаутПовторныхПопыток);			
	КонецЕсли;	
						
КонецПроцедуры

// Дополняет сборку ограничениями скрорости.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуОграничениямиСкорости(Curl)
			
	Если ЗначениеЗаполнено(Объект.МаксимальнаяСкоростьПередачиДанных) Тогда	
		
		Скорость = 0; // Число, Строка
		Если ЗначениеЗаполнено(Объект.ЕдиницаМаксимальнойСкоростиПередачиДанных) Тогда
			Скорость = Формат(Объект.МаксимальнаяСкоростьПередачиДанных, ФорматЧисла()) 
				+ Объект.ЕдиницаМаксимальнойСкоростиПередачиДанных;
		Иначе
			Скорость = Объект.МаксимальнаяСкоростьПередачиДанных;
		КонецЕсли;
		
		Curl.ОграничитьСкорость(Скорость);				
		ДобавитьМетодОбработкиВКод("ОграничитьСкорость", Скорость);			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.МинимальнаяСкоростьПередачиДанных) Тогда	
		Curl.ПрерыватьМедленнуюПередачуДанных(Объект.МинимальнаяСкоростьПередачиДанных, 
			Объект.СекундДляОценкиМинимальнойСкорости);			
				
		ДобавитьМетодОбработкиВКод("ПрерыватьМедленнуюПередачуДанных", 
			Объект.МинимальнаяСкоростьПередачиДанных, Объект.СекундДляОценкиМинимальнойСкорости);			
	КонецЕсли;	
									
КонецПроцедуры

// Дополняет сборку разрешением перенаправлений.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуРазрешениемПеренаправлений(Curl)
			
	Если Не ЭтоHTTP(СхемаURL) Тогда
		Возврат;		
	КонецЕсли;
			
	Если Объект.РазрешитьПеренаправления Тогда	
		Curl.РазрешитьПеренаправления();
		ДобавитьМетодОбработкиВКод("РазрешитьПеренаправления");
								
		Если Объект.РазрешитьПередачуСведенийАутентификацииНаДругойХост Тогда
			Curl.РазрешитьПередачуСведенийАутентификацииНаДругойХост();
			ДобавитьМетодОбработкиВКод("РазрешитьПередачуСведенийАутентификацииНаДругойХост");
		КонецЕсли;
		
		Если Объект.МаксимальноеКоличествоПеренаправлений <> 0 Тогда
			Curl.УстановитьМаксимальноеКоличествоПеренаправлений(Объект.МаксимальноеКоличествоПеренаправлений);
			ДобавитьМетодОбработкиВКод("УстановитьМаксимальноеКоличествоПеренаправлений", 
				Объект.МаксимальноеКоличествоПеренаправлений);
		КонецЕсли;

	КонецЕсли;	
									
КонецПроцедуры

// Дополняет сборку данными Multipart.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуДаннымиMultipart(Curl)
			
	Если Не ВозможноОтправлениеДанных
		Или Не ДоступноMultipart
		Или Не Объект.ВидОтправляемыхДанных = ВидОтправляемыхДанныхMultipart() Тогда
		Возврат;
	КонецЕсли;
			
	Для Каждого СтрокаФайл Из Объект.Файлы Цикл
		Curl.ДобавитьФайлMultipart(СтрокаФайл.Имя, СтрокаФайл.Файл, СтрокаФайл.ТипMIME, СтрокаФайл.ИмяФайла);		
								
		ДобавитьМетодОбработкиВКод("ДобавитьФайлMultipart", 
			СтрокаФайл.Имя, СтрокаФайл.Файл, СтрокаФайл.ТипMIME, СтрокаФайл.ИмяФайла);				
	КонецЦикла;		
			
	Для Каждого СтрокаПоле Из Объект.ПоляФормы Цикл
		Если ЗначениеЗаполнено(СтрокаПоле.Файл) Тогда
			Curl.ДобавитьТекстИзФайлаMultipart(СтрокаПоле.Имя, СтрокаПоле.Файл, СтрокаПоле.ТипMIME);								
			ДобавитьМетодОбработкиВКод("ДобавитьТекстИзФайлаMultipart", СтрокаПоле.Имя, СтрокаПоле.Файл, СтрокаПоле.ТипMIME);			
		Иначе
			Curl.ДобавитьТекстMultipart(СтрокаПоле.Имя, СтрокаПоле.Текст, СтрокаПоле.ТипMIME);								
			ДобавитьМетодОбработкиВКод("ДобавитьТекстMultipart", СтрокаПоле.Имя, СтрокаПоле.Текст, СтрокаПоле.ТипMIME);	
		КонецЕсли;			
	КонецЦикла;		
														
КонецПроцедуры

// Дополняет сборку использованием сжатия.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуИспользованиемСжатия(Curl)
			
	Если Не ЭтоHTTP(СхемаURL) Тогда
		Возврат;		
	КонецЕсли;
			
	Если Объект.ЗапроситьСжатиеОтвета Тогда	
		Curl.ИспользоватьСжатие();
		ДобавитьМетодОбработкиВКод("ЗапроситьСжатиеОтвета");
	КонецЕсли;	
									
КонецПроцедуры

// Дополняет сборку разрешением незащищенного подключения.
// 
// Параметры:
//  Curl - ВнешняяОбработка - Внешняя обработка cURL
//@skip-check dynamic-access-method-not-found
&НаСервере
Процедура ДополнитьСборкуРазрешениемНезащищенногоПодключения(Curl)
			
	Если Объект.РазрешитьНезащищенноеПодключение Тогда	
		Curl.РазрешитьНезащищенноеПодключение();
		ДобавитьМетодОбработкиВКод("РазрешитьНезащищенноеПодключение");
	КонецЕсли;	
									
КонецПроцедуры

#Область ДобавлениеМетодовОбработкиВКод

// Добавляет метод обработки с параметрами в код на 1С.
// 
// Параметры:
//  Метод - Строка - Метод обработки
//  ЗначениеПараметра1 - Строка, Число, Булево - Значение параметра 1
//  ЗначениеПараметра2 - Строка, Число, Булево - Значение параметра 2
//  ЗначениеПараметра3 - Строка, Число, Булево - Значение параметра 3
//  ЗначениеПараметра4 - Строка, Число, Булево - Значение параметра 4
//@skip-check method-too-many-params
&НаСервере
Процедура ДобавитьМетодОбработкиВКод(Метод, 
	ЗначениеПараметра1 = Неопределено, ЗначениеПараметра2 = Неопределено, 
	ЗначениеПараметра3 = Неопределено, ЗначениеПараметра4 = Неопределено)
	
	МассивПараметров = Новый Массив; // Массив из Строка, Неопределено
	МассивПараметров.Добавить(ЗначениеПараметра1);
	МассивПараметров.Добавить(ЗначениеПараметра2);
	МассивПараметров.Добавить(ЗначениеПараметра3);
	МассивПараметров.Добавить(ЗначениеПараметра4);
	
	ПараметрыТекст = "";
	КоличествоЭлементов = МассивПараметров.Количество();
	ЕстьЗначениеПараметра = Ложь;
	Для Инд = 1 По КоличествоЭлементов Цикл
		
		Значение = МассивПараметров[КоличествоЭлементов - Инд];
		
		Если ЕстьЗначениеПараметра Или Не Значение = Неопределено Тогда

			Если Не ЗначениеЗаполнено(Значение) Тогда
				ЗначениеТекст = "";
			ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
				ЗначениеТекст = Формат(Значение, ФорматЧисла()); 
			ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
				ЗначениеТекст = Формат(Значение, "БЛ=Ложь; БИ=Истина;"); 
			Иначе
				ЗначениеТекст = ОбернутьКавычками(ЭкранироватьКавычку(Значение));
			КонецЕсли;
		
			ПараметрыТекст = "" 
				+ ЗначениеТекст
				+ ?(ПараметрыТекст = "", "", ", ")
				+ ПараметрыТекст;
				
			ЕстьЗначениеПараметра = Истина;
			
		КонецЕсли;	
		
	КонецЦикла;
		
	Объект.Результат1С = Объект.Результат1С 
		+ Символы.ПС
		+ СтрШаблон("    .%1(%2)", Метод, ПараметрыТекст);
			
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетодыУстановкиЗаголовковВКод(Заголовки)
	
	КоличествоСтрок = СтрЧислоСтрок(Заголовки);
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(Заголовки, НомерСтроки);
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Строка, ":");
		Если ПозицияДвоеточия > 0 Тогда
			ИмяЗаголовка = СокрЛП(Сред(Строка, 1, ПозицияДвоеточия - 1));
			ЗначениеЗаголовка = СокрЛП(Сред(Строка, ПозицияДвоеточия + 1));
			ДобавитьМетодОбработкиВКод("УстановитьЗаголовок", ИмяЗаголовка, ЗначениеЗаголовка);
		Иначе
			ДобавитьМетодОбработкиВКод("УстановитьЗаголовок", Строка, "");
		КонецЕсли;
	КонецЦикла;
					
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетодПолучитьВКод()
	ДобавитьМетодОбработкиВКод("Получить", Объект.URL);
КонецПроцедуры

// Добавляет метод Отправить в код на 1С.
// 
&НаСервере
Процедура ДобавитьМетодОтправитьВКод()
	
	ОтправляемыеДанные = ПолучитьОтправляемыеДанные();
	ОтправляемыеДанныеТекст = Неопределено;
	Если ТипЗнч(ОтправляемыеДанные) = Тип("Строка") Тогда
		ОтправляемыеДанныеТекст = ОтправляемыеДанные;
		УдалитьЗапрещенныеСимволыОтправляемыхДанных(ОтправляемыеДанныеТекст);
	ИначеЕсли ТипЗнч(ОтправляемыеДанные) = Тип("Файл") Тогда
		ОтправляемыеДанныеТекст = ОтправляемыеДанные.ПолноеИмя;
	КонецЕсли;
		
	ДобавитьМетодОбработкиВКод("Отправить", Объект.URL, ОтправляемыеДанныеТекст, Объект.МетодЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМетодПолучитьЗаголовкиВКод()
	ДобавитьМетодОбработкиВКод("ПолучитьЗаголовки", Объект.URL);
КонецПроцедуры

&НаСервере
Функция ФорматЧисла()
	Возврат "ЧРД=.; ЧГ=;";
КонецФункции

#КонецОбласти

#КонецОбласти

// Экранирует кавычку в строке.
// 
// Параметры:
//  Строка - Строка
// 
// Возвращаемое значение:
//  Строка
&НаСервере
Функция ЭкранироватьКавычку(Строка)
	Кавычка = """";
	Возврат СтрЗаменить(Строка, Кавычка, "" + Кавычка + Кавычка);
КонецФункции

// Оборачивает строку кавычками.
// 
// Параметры:
//  Строка - Строка
// 
// Возвращаемое значение:
//  Строка
&НаСервере
Функция ОбернутьКавычками(Строка)
	Кавычка = """";
	Возврат СтрШаблон("%2%1%2", Строка, Кавычка);	
КонецФункции

// Возвращает неопределено если значение Ложь.
// 
// Параметры:
//  Значение - Булево - Значение
// 
// Возвращаемое значение:
//  Булево, Неопределено - Значение
&НаСервере
Функция ЛожьКакНеопределено(Значение)
	Возврат ?(Не Значение, Неопределено, Значение);
КонецФункции

#КонецОбласти

#Область Заголовки

&НаСервере
Процедура ЗаполнитьТекстЗаголовковПримеромНаСервере()
	
	Объект.ЗаголовкиЗапросаТекстом = СоздатьОбъектCurl()
		.ПолучитьМакет("ChromeHeaders")
		.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗаголовков()
	
	Если Объект.ВводитьЗаголовкиЗапросаТекстом Тогда
		Возврат Объект.ЗаголовкиЗапросаТекстом;
	Иначе
		Возврат ТаблицаЗаголовковЗапросаТекстом();
	КонецЕсли;

КонецФункции

&НаСервере
Функция ТаблицаЗаголовковЗапросаТекстом()

	Текст = "";
	
	Для Каждого СтрокаТаблицы Из Объект.ЗаголовкиЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
			Текст = Текст 
				+ ?(Текст = "", "", Символы.ПС)
				+ СтрШаблон("%1: %2", СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Текст;

КонецФункции

#КонецОбласти

#Область ОбновлениеЗначенийРеквизитов

&НаКлиенте
Процедура ОбновитьРеквизиты()
	ОбновитьВозможностьПолученияЗаголовков();
	ОбновитьПризнакВозможностиОтправленияДанных();
	ОбновитьПризнакОтправкиДанных();
	ОбновитьПризнакДоступноMultipart();
	ОбновитьМетодЗапроса();
	ОбновитьВидОтправляемыхДанных();
	ОбновитьФайлСохраненияЗаголовков();	
	ОбновитьВозможнстьРазрешенияНезащищенногоПодключения();
	ОбновитьРеквизитыHTTP();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакВозможностиОтправленияДанных()
	ВозможноОтправлениеДанных =
			(Не ЭтоHTTP(СхемаURL) 
				Или Не ЭтоМетодGET()
				Или Не ЗначениеЗаполнено(Объект.МетодЗапроса))
			И Не Объект.ПолучитьТолькоЗаголовки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакОтправкиДанных()
	ЭтоОтправкаДанных =
			ВозможноОтправлениеДанных
			И (ЗначениеЗаполнено(Объект.ВидОтправляемыхДанных) Или ЗначениеЗаполнено(Объект.МетодЗапроса));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПризнакДоступноMultipart()
	ДоступноMultipart = ВозможноОтправлениеДанных
		И (ЭтоМетодPOST() Или Не ЗначениеЗаполнено(Объект.МетодЗапроса))
		И ЭтоHTTP(СхемаURL);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМетодЗапроса()
	Если Не ДоступенМетодЗапроса() Тогда
		Объект.МетодЗапроса = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидОтправляемыхДанных()
	Если Не ВозможноОтправлениеДанных Тогда
		Объект.ВидОтправляемыхДанных = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлСохраненияЗаголовков()
	Если Не ДоступенФайлСохраненияЗаголовков() Тогда
		Объект.ФайлСохраненияЗаголовков = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыHTTP()
	
	Если ЭтоHTTP(СхемаURL) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РазрешитьПеренаправления = Ложь;
	Объект.РазрешитьПередачуСведенийАутентификацииНаДругойХост = Ложь;
	Объект.МаксимальноеКоличествоПеренаправлений = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВозможностьПолученияЗаголовков()
	ВозможноПолучатьЗаголовки = ЭтоHTTP(СхемаURL) Или ЭтоFTP(СхемаURL) Или ЭтоFILE(СхемаURL);
	
	Если Не ВозможноПолучатьЗаголовки Тогда
		Объект.ПолучитьТолькоЗаголовки = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВозможнстьРазрешенияНезащищенногоПодключения()
	ВозможноРазрешитьНезащищенноеПодключение = ЭтоHTTPS(СхемаURL) Или ЭтоSFTP(СхемаURL) Или ЭтоSCP(СхемаURL);
	
	Если Не ВозможноРазрешитьНезащищенноеПодключение Тогда
		Объект.РазрешитьНезащищенноеПодключение = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСписковВыбора

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()
	
	ЗаполнитьСписокВыбораМетодаЗапроса();
	ЗаполнитьСписокВыбораВидыОтправляемыхДанных();
	ЗаполнитьСписокВыбораМетодаАутентификации();
	ЗаполнитьСписокВыбораПротоколаПрокси();
	ЗаполнитьСписокВыбораТипаСертификатаКлиента();
	ЗаполнитьСписокВыбораТипаЗакрытогоКлючаСертификатаКлиента();
	ЗаполнитьСписокВыбораВидСертификатаУЦ();
	ЗаполнитьСписокВыбораМетодаАутентификацииПрокси();
	ЗаполнитьСписокВыбораТипаСертификатаКлиентаПрокси();
	ЗаполнитьСписокВыбораТипаЗакрытогоКлючаСертификатаКлиентаПрокси();
	ЗаполнитьСписокВыбораВидСертификатаУЦПрокси();
	ЗаполнитьСписокВыбораЕдиницыМаксимальнойСкоростиПередачиДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораМетодаЗапроса()

	СписокВыбора = Элементы.МетодЗапроса.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("GET");
	СписокВыбора.Добавить("POST");
	СписокВыбора.Добавить("PUT");
	СписокВыбора.Добавить("DELETE");
	СписокВыбора.Добавить("PATCH");
	СписокВыбора.Добавить("HEAD");
	СписокВыбора.Добавить("OPTIONS");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидыОтправляемыхДанных()

	СписокВыбора = Элементы.ВидОтправляемыхДанных.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", "Не отправлять");	
	СписокВыбора.Добавить(ВидОтправляемыхДанныхФайл());
	
	Если ЭтоHTTP(СхемаURL) Тогда
		СписокВыбора.Добавить(ВидОтправляемыхДанныхТекст());
	КонецЕсли;
	
	Если ДоступноMultipart Тогда	
		СписокВыбора.Добавить(ВидОтправляемыхДанныхMultipart());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораМетодаАутентификации()

	СписокВыбора = Элементы.МетодАутентификации.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
		
	СписокВыбора.Добавить("", "Не использовать");
	СписокВыбора.Добавить(МетодАутентификацииBasic(), "Basic");
	
	Если ЭтоHTTP(СхемаURL) Тогда
		СписокВыбора.Добавить(МетодАутентификацииDigest(), "Digest");
		СписокВыбора.Добавить(МетодАутентификацииBearerToken(), "Bearer Token");
		СписокВыбора.Добавить(МетодАутентификацииAWS4(), "AWSv4");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПротоколаПрокси()

	СписокВыбора = Элементы.ПроксиПротокол.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(ПротоколПроксиHTTP());
	СписокВыбора.Добавить(ПротоколПроксиHTTPS());
	СписокВыбора.Добавить(ПротоколПроксиSOCKS4());
	СписокВыбора.Добавить(ПротоколПроксиSOCKS4a());
	СписокВыбора.Добавить(ПротоколПроксиSOCKS5());
	СписокВыбора.Добавить(ПротоколПроксиSOCKS5h());

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораМетодаАутентификацииПрокси()
	
	СписокВыбора = Элементы.ПроксиМетодАутентификации.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
		
	СписокВыбора.Добавить("", "Не использовать");
	СписокВыбора.Добавить(МетодАутентификацииBasic(), "Basic");
	
	Если Объект.ПроксиПротокол = ПротоколПроксиHTTP() Или Объект.ПроксиПротокол = ПротоколПроксиHTTPS() Тогда
		СписокВыбора.Добавить(МетодАутентификацииDigest(), "Digest");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаСертификатаКлиента()
	
	СписокВыбора = Элементы.ТипСертификатаКлиента.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.ЗагрузитьЗначения(ТипыСертификатаКлиента());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаЗакрытогоКлючаСертификатаКлиента()
	
	СписокВыбора = Элементы.ТипЗакрытогоКлючаСертификата.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.ЗагрузитьЗначения(ТипыЗакрытогоКлючаСертификатаКлиента());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидСертификатаУЦ()
	
	СписокВыбора = Элементы.ВидСертификатаУЦ.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", "Не использовать");
	СписокВыбора.Добавить(ВидСертификатаУЦФайлом(), "Указать файл с сертификатами");
	СписокВыбора.Добавить(ВидСертификатаУЦИзОС(), "Использовать из ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаСертификатаКлиентаПрокси()
	
	СписокВыбора = Элементы.ПроксиТипСертификатаКлиента.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.ЗагрузитьЗначения(ТипыСертификатаКлиента());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаЗакрытогоКлючаСертификатаКлиентаПрокси()
	
	СписокВыбора = Элементы.ПроксиТипЗакрытогоКлючаСертификата.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.ЗагрузитьЗначения(ТипыЗакрытогоКлючаСертификатаКлиента());
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидСертификатаУЦПрокси()
	
	СписокВыбора = Элементы.ПроксиВидСертификатаУЦ.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", "Не использовать");
	СписокВыбора.Добавить(ВидСертификатаУЦФайлом(), "Указать файл с сертификатами");
	СписокВыбора.Добавить(ВидСертификатаУЦИзОС(), "Использовать из ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЕдиницыМаксимальнойСкоростиПередачиДанных()
	
	СписокВыбора = Элементы.ЕдиницаМаксимальнойСкоростиПередачиДанных.СписокВыбора; // СписокЗначений из Строка
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("", "байт/с");
	СписокВыбора.Добавить("K", "Кбайт/с");
	СписокВыбора.Добавить("M", "Мбайт/с");
	СписокВыбора.Добавить("G", "Гбайт/с");
	СписокВыбора.Добавить("T", "Тбайт/с");
	СписокВыбора.Добавить("P", "Пбайт/с");
		
КонецПроцедуры

#КонецОбласти

#Область ПредопределенныеЗначения

&НаКлиенте
Функция ТипыСертификатаКлиента()
	Массив = Новый Массив(); // Массив из Строка
	Массив.Добавить("PEM");
	Массив.Добавить("DER");
	Массив.Добавить("ENG");
	Массив.Добавить("P12");
	Возврат Массив;	
КонецФункции

&НаКлиенте
Функция ТипыЗакрытогоКлючаСертификатаКлиента()
	Массив = Новый Массив(); // Массив из Строка
	Массив.Добавить("PEM");
	Массив.Добавить("DER");
	Массив.Добавить("ENG");
	Возврат Массив;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидОтправляемыхДанныхТекст()
	Возврат "Текст";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидОтправляемыхДанныхФайл()
	Возврат "Файл";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидОтправляемыхДанныхMultipart()
	Возврат "Multipart";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодАутентификацииBasic()
	Возврат "basic";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодАутентификацииDigest()
	Возврат "digest";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодАутентификацииAWS4()
	Возврат "aws-sigv4";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МетодАутентификацииBearerToken()
	Возврат "bearer";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиHTTP()
	Возврат "http"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиHTTPS()
	Возврат "https"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиSOCKS4()
	Возврат "socks4"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиSOCKS4a()
	Возврат "socks4a"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиSOCKS5()
	Возврат "socks5"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПротоколПроксиSOCKS5h()
	Возврат "socks5h"; 	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКомандногоИнтерпретатораCmd()
	Возврат "cmd";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКомандногоИнтерпретатораBash()
	Возврат "bash";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидСертификатаУЦФайлом()
	Возврат "Файлом";	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидСертификатаУЦИзОС()
	Возврат "ОС";	
КонецФункции

#КонецОбласти

#КонецОбласти